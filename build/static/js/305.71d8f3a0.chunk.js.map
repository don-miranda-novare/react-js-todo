{"version":3,"file":"static/js/305.71d8f3a0.chunk.js","mappings":"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","sources":["config/indexedDb.ts","pages/Profile.tsx","pages/Forbidden.tsx"],"sourcesContent":["import Dexie, { Table } from \"dexie\";\n\nexport interface Profile {\n  id: string;\n  position: string;\n  email: string;\n  address: string;\n}\n\nexport class MyDB extends Dexie {\n  profile!: Table<Profile>;\n\n  constructor() {\n    super(\"profileDb\");\n    this.version(1).stores({\n      profile: \"id, position, email, address\"\n    });\n  }\n}\n\nexport const indexedDb = new MyDB();","import { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth, firestoreDb } from \"../config/firebase\";\nimport { Forbidden } from \"./Forbidden\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { Box, Button, Input, Snackbar, Typography } from \"@mui/material\";\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { useEffect, useState } from \"react\";\nimport { MyDB } from \"../config/indexedDb\";\n\ninterface ProfileFormData {\n    id: string;\n    position: string;\n    email: string;\n    address: string;\n}\n\nexport const Profile = () => {\n    const [user] = useAuthState(auth);\n    const [profileData, setProfileData] = useState({} as ProfileFormData);\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n    const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n\n    const schema = yup.object().shape({\n        id: yup.string().optional().default(user?.uid || \"unknown\"),\n        position: yup.string().required(\"Position is required\").max(20, \"Position must be at most 20 characters long\"),\n        email: yup.string().email(\"Invalid email\").required(\"Email is required\").max(20, \"Email must be at most 20 characters long\"),\n        address: yup.string().required(\"Address is required\").max(20, \"Address must be at most 20 characters long\"),\n    });\n\n    const { register, handleSubmit, formState: { errors }, reset, setValue } = useForm<ProfileFormData>({\n        resolver: yupResolver(schema),\n    });\n\n    const profileCollection = collection(firestoreDb, \"profile\");\n\n    const getProfile = async () => {\n        const querySnapshot = await getDocs(profileCollection);\n        const profiles = {\n            id: querySnapshot.docs[0].id,\n            position: querySnapshot.docs[0].data().position,\n            email: querySnapshot.docs[0].data().email,\n            address: querySnapshot.docs[0].data().address,\n        }\n\n        setProfileData(profiles);\n    };\n\n    const updateIndexedDb = async (data: ProfileFormData) => {\n        const db = new MyDB();\n        db.profile.toArray().then(async (profiles) => {\n            if (profiles.length > 0) {\n                await db.profile.update(profiles[0].id, data);\n                setSnackbarMessage(`Profile updated: ${profiles[0].id}`);\n            } else {\n                await db.profile.add(data);\n                setSnackbarMessage(`Profile added: ${data.id}`);\n            }\n\n            setSnackbarOpen(true);\n        });\n    };\n\n    const onSubmit = async (data: ProfileFormData) => {\n        updateIndexedDb(data);\n\n        if ('serviceWorker' in navigator && 'SyncManager' in window) {\n            // try {\n            //     const registration = await navigator.serviceWorker.ready;\n            //     await registration.sync.register('profileSyncTag');\n            //     console.log('Profile sync registered');\n            // } catch (error) {\n            //     console.error('Profile sync failed', error);\n            // }\n            \n            // navigator.serviceWorker.register('/service-worker.js')\n            // .then((registration) => {\n            //     console.log('Service Worker registered with scope:', registration.scope);\n            // })\n            // .catch((error) => {\n            //     console.error('Service Worker registration failed:', error);\n            // });\n\n            const registration = await navigator.serviceWorker.ready;\n            await registration.sync.register('profile-sync');\n            console.log('Profile sync registered');\n        }\n    };\n\n    useEffect(() => {\n        getProfile();\n    }, []);\n\n    useEffect(() => {\n        if (profileData) {\n            // update form\n            setValue(\"position\", profileData?.position);\n            setValue(\"email\", profileData?.email);\n            setValue(\"address\", profileData?.address);\n\n            // update indexedDb\n            updateIndexedDb(profileData);\n        }\n    }, [profileData]);\n\n    if (!user) {\n        return <Forbidden />;\n    }\n\n    return (\n        <Box>\n            <h1>Profile</h1>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n                    <Box sx={{ display: \"flex\", flexDirection: \"row\", gap: 2 }}>\n                        <Typography variant=\"h6\">Position</Typography>\n                        <Input\n                            {...register(\"position\")}\n                            placeholder=\"Position\"\n                            fullWidth\n                            sx={{ marginBottom: 2 }}\n                            inputProps={{ style: { fontSize: \"1.25rem\" } }}\n                        />\n                    </Box>\n                    {errors.position && (\n                        <Typography variant=\"body1\" color=\"error\">{errors.position.message}</Typography>\n                    )}\n                    <Box sx={{ display: \"flex\", flexDirection: \"row\", gap: 2 }}>\n                        <Typography variant=\"h6\">Email</Typography>\n                        <Input\n                            {...register(\"email\")}\n                            placeholder=\"Email\"\n                            fullWidth\n                            sx={{ marginBottom: 2 }}\n                            inputProps={{ style: { fontSize: \"1.25rem\" } }}\n                        />\n                    </Box>\n                    {errors.email && (\n                        <Typography variant=\"body1\" color=\"error\">{errors.email.message}</Typography>\n                    )}\n                    <Box sx={{ display: \"flex\", flexDirection: \"row\", gap: 2 }}>\n                        <Typography variant=\"h6\">Address</Typography>\n                        <Input\n                            {...register(\"address\")}\n                            placeholder=\"Address\"\n                            fullWidth\n                            sx={{ marginBottom: 2 }}\n                            inputProps={{ style: { fontSize: \"1.25rem\" } }}\n                        />\n                    </Box>\n                    {errors.address && (\n                        <Typography variant=\"body1\" color=\"error\">{errors.address.message}</Typography>\n                    )}\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" sx={{ height: 40, borderRadius: 2 }}>\n                        <Typography variant=\"h6\">Save</Typography>\n                    </Button>\n                </Box>\n            </form>\n\n            <Snackbar\n                open={snackbarOpen}\n                autoHideDuration={2000}\n                onClose={() => setSnackbarOpen(false)}\n                anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n                message={snackbarMessage}\n            />\n        </Box>\n    );\n};\n\nexport default Profile;","import { Button, Typography } from \"@mui/material\";\r\n\r\nexport const Forbidden = () => {\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\">You do not have permission to access this page.</Typography>\r\n            <Button variant=\"contained\" onClick={() => window.location.href = \"/\"}>Back to Home</Button>\r\n        </div>\r\n    );\r\n};"],"names":["MyDB","Dexie","constructor","super","profile","this","version","stores","Profile","user","useAuthState","auth","profileData","setProfileData","useState","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","schema","yup","shape","id","optional","default","uid","position","required","max","email","address","register","handleSubmit","formState","errors","reset","setValue","useForm","resolver","yupResolver","profileCollection","collection","firestoreDb","updateIndexedDb","async","db","toArray","then","profiles","length","update","data","add","useEffect","querySnapshot","getDocs","docs","getProfile","_jsxs","Box","children","_jsx","onSubmit","navigator","window","registration","serviceWorker","ready","sync","console","log","sx","display","flexDirection","gap","Typography","variant","Input","placeholder","fullWidth","marginBottom","inputProps","style","fontSize","color","message","Button","type","height","borderRadius","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Forbidden","onClick","location","href"],"sourceRoot":""}